import * as React from 'react';
import {Animated, Button} from 'react-native';
import {useRef} from 'react';

// sequence: Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ ÎèôÍ∏∞Ï†ÅÏúºÎ°ú ÏûëÎèôÌïòÎèÑÎ°ù ÌïúÎã§.
// delay: Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÇ¨Ïù¥Ïóê ÎîúÎ†àÏù¥Î•º Ï§ÄÎã§.
// parallel: Í∏∞Ï°¥Ïùò Ïï†ÎãàÎ©îÏù¥ÏÖò ÎèôÏûëÍ≥º ÌÅ¨Í≤å Îã§Î•¥ÏßÄÏïäÎã§.Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ Î¨∂Ïñ¥Ï£ºÎäî Ïó≠Ìï† Ïï†ÎãàÎ©îÏù¥ÏÖò ÌïòÎÇòÍ∞Ä Î©àÏ∂îÎ©¥ Îã§Î©àÏ∂òÎã§
// stagger: Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÇ¨Ïù¥Ïóê delayÎ•º Ï†ÅÏö©ÏãúÏºúÏ§ÄÎã§.

// 1) y -200 > 0 timing
// 2) x 0 > 100 timing
const AnimatedComposing = () => {
  const translateXAnim = useRef(new Animated.Value(0)).current;
  const translateYAnim = useRef(new Animated.Value(-200)).current;

  const onButtonPress = () => {
    setTimeout(() => {
      translateYAnim.stopAnimation();
    }, 500);

    Animated.parallel([
      Animated.timing(translateYAnim, {
        toValue: 0,
        useNativeDriver: true,
      }),
      Animated.timing(translateXAnim, {
        toValue: 100,
        useNativeDriver: true,
      }),
    ]).start();
  };

  return (
    <>
      <Button title={'Button'} onPress={onButtonPress} />
      <Animated.Text
        style={{
          fontSize: 70,
          transform: [
            {translateX: translateXAnim},
            {translateY: translateYAnim},
          ],
        }}>
        üçä
      </Animated.Text>
    </>
  );
};

export default AnimatedComposing;
